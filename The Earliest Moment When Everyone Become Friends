1101. The Earliest Moment When Everyone Become Friends

In a social group, there are N people, with unique integer ids from 0 to N-1.

We have a list of logs, where each logs[i] = [timestamp, id_A, id_B] contains a non-negative integer timestamp, and the ids of two different people.

Each log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.

Let's say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.

Return the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.

 

Example 1:

Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
Output: 20190301
Explanation: 
The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].
The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].
The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].
The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].
The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.
The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.




Input: logs = [[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]], n = 4
Output: 3
Explanation: At timestamp = 3, all the persons (i.e., 0, 1, 2, and 3) become friends.





Earliest time to become frdns


logs[i] = [timestamp, id_A, id_B]

[[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]]

List is sorted by timestamp

1sec  [0,2,0]   2-0 

2sec  [1,0,1]   2-0-1

3sec  [3,0,3]   2-0-1
             |
             3

      [4,1,2]    1 and 2 already know other

      [7,3,1]    1 and 3 are already connected
_________
3sec




Sort + DSU

MST -> Sort the edges by time stamp


If the frnds belong to same group, skip that edge

UNION FIND


findAcquaintces(){

sort(edges.begin(),edges.end());


for(int i=0;i<edges.size();i++){

int timestamp = edges[i][0]
int a= edges[i][1]
int b= edges[i][2]


par1 = find(a)
par2=  find(b)

//same parent means they r already frnds do ntg

//if not equal then find which set it belongs to
if(par1 != par2){

merge(a,b)
    
}

c+= ; 


}
}



























