class Solution {
  public:
    
    bool dfs(vector<vector<int>>& adj, int node,int par,vector<bool> & vis){
        
        vis[node] = true;
        
        for(int child:adj[node]){
            
            if(!vis[child])
              if(dfs(adj,child,node,vis)) return true;
              
            else if( child != par) return true;
               
        }
        
        return false;
        
    }  
  
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        
        
        vector<vector<int>> adj(V);
        
        for(int i=0;i<edges.size();i++){
            
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<bool> vis(V,false);
        
        for(int i=0;i<V;i++){
            
        if(!vis[i])            
           if(dfs(adj,i,-1,vis))
              return true;
        }          
        
        return false;
    }
};





// Key DIffference

// Given are the edges, not adjnceny list

// edges = [[0,1][0,2]]


// means there is an edge 0-1 and another edge [0-2]

// adj list means - [[0,1],[0,2]]

// 0 - 0 and 1
// 1 - 0 and 2
