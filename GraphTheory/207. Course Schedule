
// [a,b] => take b first a
// [1,0] -> 0 -> 1


// adj list would be 

// node     children
// 0    ->   1

class Solution {
public:

    bool isCyclic(vector<vector<int>> &adj, int node, vector<bool> &vis,vector<bool> &pathVis){       
        
        vis[node] = true;
        pathVis[node] = true;
    
        
        for(int child: adj[node]){
            
            if(!vis[child]){
               if(isCyclic(adj,child,vis,pathVis)) return true;
            }
               
            // if its viisted and patvis is true
            if(pathVis[child]) return true;
            
               
            }
            
            // why I ma not marking vis and false  then, because i dont 
            // want to traverse tht path again,  since i trversed tht entire path
            // from diff diretion.
            pathVis[node] = false;
            return false;
        }


    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
         
         vector<vector<int>> adj(numCourses);

         for (auto& p : prerequisites) {
            adj[p[1]].push_back(p[0]);
        }

         vector<bool> vis(numCourses,false);
         vector<bool> pathVis(numCourses,false); 

         for(int i=0;i<numCourses;i++){

          if(!vis[i])  
            if(isCyclic(adj,i,vis,pathVis)) return false;
         }


         return true;
    }
};


// TOPO sort scheduling 
// if there is a cycle then we cant finish course 
