class Solution {
public:

   vector<int> par ;
   vector<int> rank;

   int find(int x){

    if(x==par[x]) return x;   
    return par[x] = find(par[x]);

   }
     
    void unionRank(int x, int y){
     
    //  find par of the both the arrays
     int a = find(x);
     int b = find(y);

     if(a==b) return ;

     if(a<b){
        par[b] = a; 
     }

     else{      
        par[a] = b; 
     }
       

    }

    
    string smallestEquivalentString(string s1, string s2, string baseStr) {
        
        par.resize(26);
        // rankk.resize(26, 0);
        int n = s1.size();

        // Initialize each element to be its own parent (disjoint sets).
        for (int i = 0; i < 26; i++) {
            par[i] = i;
        }

        for(int i=0;i<n;i++){
            unionRank(s1[i]-'a', s2[i]-'a');
        }

        string res = "";

        for(int i=0;i<baseStr.size();i++){

            int parent = find(baseStr[i]-'a');
            res += (char)(parent + 'a');
        }

      return res;  
    }
};

// s1 = "parker", 
// s2 = "morris", 

//  p == m 
//  a == o
//  r == r, k,s
//  e == i

//  we need to find buckets with parent being the 
//  lexicographically the smallest alphabet.
 



// "p a r s e r"
// "m a k k e k"

