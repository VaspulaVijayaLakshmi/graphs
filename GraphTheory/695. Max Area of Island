class Solution {
public:
    
    int dfs(vector<vector<int>>& grid,int x,int y){
       
    //    check for borders
    if(x<0 || x>=grid.size() || y<0 || y>=grid[0].size() )
    return 0;

    if(grid[x][y]==0)
    return 0;


    // call dfs for 4 directions
    grid[x][y]=0;

    return 1+dfs(grid,x+1,y) + dfs(grid,x-1,y) + dfs(grid,x,y+1) + dfs(grid,x,y-1);
        
    }
    

    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        
        int rows=grid.size();
        int col=grid[0].size();
             
        int maxArea=0;
        
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<col;j++)
            {
                  
                if( grid[i][j]==1 ){
                    
                   maxArea = max( dfs(grid,i,j) , maxArea );
                }
            }
        }
        return maxArea;
        
    }
};
