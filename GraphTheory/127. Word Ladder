class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {

       if(beginWord.size() != endWord.size()) return 0;

       unordered_map<string, bool> vis;
       unordered_set<string> wordListSet(wordList.begin(),wordList.end());
       queue<string> q;

       q.push(beginWord);
       vis[beginWord] =true;

       int seq=0;

       while(!q.empty()){

        int sz=q.size();

        while(sz--){

        auto word = q.front();
        q.pop();

        if(word == endWord) return seq+1;
        
        for(int i=0;i<word.size();i++){

            for(int j=0;j<26;j++){

                string nword = word;
                nword[i] = 'a' + j;

                if(!vis[nword] && wordListSet.find(nword) != wordListSet.end()){
                     vis[nword] = true;
                     q.push(nword);    
                }
            }
        }

        }
            seq++;

       }

       return 0;
    }
    
};


// beginWord = "hit", endWord = "cog", 
// wordList = ["hot","dot","dog","lot","log","cog"]

// hit -> change h - (a-z)
//     -> chnage i - (a-z)
//     -> change t - (a-z)
