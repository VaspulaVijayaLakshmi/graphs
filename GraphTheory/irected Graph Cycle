class Solution {
  public:
  
  
    bool isCyclic(vector<vector<int>> &adj, int node, vector<bool> &vis,vector<bool> &pathVis){
        
        
        vis[node] = true;
        pathVis[node] = true;
    
        
        for(int child: adj[node]){
            
            if(!vis[child]){
               if(isCyclic(adj,child,vis,pathVis)) return true;
            }
               
            // if its viisted and patvis is true
            if(pathVis[child]) return true;
            
               
            }
            
            // why I ma not marking vis and false  then, because i dont 
            // want to traverse tht path again,  since i trversed tht entire path
            // from diff diretion.
            pathVis[node] = false;
            return false;
        }
        

    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        
        vector<vector<int>> adj(V);
        
        for(int i=0;i<edges.size();i++){
            
            
            int u=edges[i][0];
            int v=edges[i][1];
            
            adj[u].push_back(v);
        }
        
        
        vector<bool> vis(V, false), pathVis(V,false);
        
        for(int i=0;i<V;i++){
            
            if(!vis[i]){
        
         if(isCyclic(adj,i,vis,pathVis)) return true;
            }
        }        
        
        
        return false;
        
        
    }
};
