// shortest path - with no weights -> ( bfs always)
// shortest path - with weights as 0/1 - > (0/1 bfs always)
// shortest path - with any weights( without -ve edge cycle) ->dijkstra always


// also bfs can be 2 types
// multisource bfs or normal bfs
 
//  this prblm is normal bfs


class Solution {
public:

    vector<pair<int, int>> dir = {{1,0}, {-1,0}, {0,1}, {0,-1}};

    bool isValid(int m,int n, int r,int c,vector<vector<char>>& maze){

        if(r<0 || c<0 || r>=m || c>=n || maze[r][c] == '+')
         return false;

         return true; 
    }


    int nearestExit(vector<vector<char>>& maze, vector<int>& e) {

        int m=maze.size();
        int n=maze[0].size();

        int x=e[0];
        int y=e[1];

    //   if entrance is wall
       if(maze[x][y] == '+')
         return -1;

      queue<pair<int,int>> q;
      q.push({x,y});
      maze[x][y] = '+';
      

      int steps=0;                  

      while(!q.empty()){

        int sz = q.size();

        while(sz--){

        int x = q.front().first;
        int y= q.front().second;
        q.pop(); 
 
        if( (x==0 || y==0 || x==m-1 || y==n-1 )  && !(x == e[0] && y == e[1]))    
              return steps;

        for(int i=0;i<4;i++){

            int nx = x + dir[i].first;
            int ny = y + dir[i].second;

            if(isValid(m,n,nx,ny,maze)){

              maze[nx][ny] = '+';  
              q.push({nx,ny});   
            }
        
        }

        }

        steps++;

      }

    return -1;

    }
};
