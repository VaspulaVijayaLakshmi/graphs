//https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/
//similar question



// when the nodes are not from 1 to n-1
// use unordered_map

// Since we dont know what are the values of nodes, use unordered_map for 
// vis

class Solution {

     vector<vector<int>> adj;


    void createGraph(TreeNode* root){

        if(root==NULL) return ;

        if(root->left){
            adj[root->val].push_back(root->left->val);
            adj[root->left->val].push_back(root->val);
        }

        if(root->right){
            adj[root->val].push_back(root->right->val);
            adj[root->right->val].push_back(root->val);

        }

        createGraph(root->left);
        createGraph(root->right);

    }


public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {

    adj.resize(10000);

    // create graph
    createGraph(root);

    // now bfs to tht level
    vector<int> res;
    unordered_map<int, bool> vis;

    queue<int> q;
    q.push(target->val);
    vis[target->val] = true;

    int level=0;

    while(!q.empty()){
        int sz=q.size();

        if(level==k) break;

        while(sz--){

            auto front=q.front();
            q.pop();

            for(int child : adj[front]){

                if(!vis[child]){
                    vis[child] = true;
                    q.push(child);
                }
            }
        }

        level++;

    }

      while(!q.empty()){
        res.push_back(q.front());
        q.pop();
      }

    return res;
    }

};
