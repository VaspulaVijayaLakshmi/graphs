class Solution {
public:

   vector<int> par ;
   vector<int> rank;

   int find(int x){

    if(x==par[x]) return x;   
    return par[x] = find(par[x]);

   }
     
    void unionRank(int x, int y){
     
    //  find par of the both the arrays
     int a = find(x);
     int b = find(y);

     if(a==b) return ;

     if(rank[a] > rank[b]){

        par[b] = a; 
        rank[a] += rank[b];

     }

     else{
        
        par[a] = b; 
        rank[b] += rank[a];


     }
       

    } 

    bool equationsPossible(vector<string>& equations) {

        par.resize(26);
        rank.resize(26,0);

        for(int i=0;i<26;i++){
            par[i] = i;
        }

        // first finish the equality operations
        for(int i=0;i<equations.size();i++){

            string s = equations[i];
            if(s[1] == '='){
                unionRank(s[0] - 'a', s[3]-'a');
            }

        }


    //    check for inquality operations
        for(int i =0 ;i<equations.size();i++){

            string s = equations[i];
            if(s[1] == '!'){
               
            //   if they are present in same set, its a contradictory stmt
               if(find(s[0]-'a') == find(s[3]-'a'))
                return false;
            }
            
        }
       
        return true;
        
    }
};
