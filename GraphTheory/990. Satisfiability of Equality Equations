class Solution {
    vector<int> parent;
    vector<int> rankk;

    // Find the root of the set containing element x with path compression.
    int find(int x) {
        if (parent[x] == x) {
            return x;
        }
        return parent[x] = find(parent[x]);
    }

    // Union two sets containing elements x and y.
    void unionSet(int x, int y) {
        x = find(x);
        y = find(y);

        if (x == y) {
            return;  // x and y are already in the same set.
        }

        // Union by rank to keep the tree flat.
        if (rankk[x] > rankk[y]) {
            parent[y] = x;
        } else if (rankk[x] < rankk[y]) {
            parent[x] = y;
        } else {
            parent[y] = x;
            rankk[x]++;
        }
    }

public:
    bool equationsPossible(vector<string>& vec) {
        parent.resize(26);
        rankk.resize(26, 0);

        // Initialize each element to be its own parent (disjoint sets).
        for (int i = 0; i < parent.size(); i++) {
            parent[i] = i;
        }

        // Process all equality equations and perform union operations.
        for (string& str : vec) {
            if (str[1] == '=') {
                unionSet(str[0] - 'a', str[3] - 'a');
            }
        }

        // Process all inequality equations and check for contradictions.
        for (string& str : vec) {
            if (str[1] == '!') {
                int x = find(str[0] - 'a');
                int y = find(str[3] - 'a');

                // If x and y are in the same set, a contradiction exists.
                if (x == y) return false;
            }
        }

        // No contradictions found, the equations are satisfiable.
        return true;
    }
};
