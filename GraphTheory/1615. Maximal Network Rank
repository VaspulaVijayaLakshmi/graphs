class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        
      vector<vector<int>> adj(n);

// create graph
      for(int i=0;i<roads.size();i++){

           int u=roads[i][0];
           int v=roads[i][1];

           adj[u].push_back(v);
           adj[v].push_back(u);
         
      }

      int maxRank = INT_MIN;

// for each pair in the adj list
      for(int i=0;i<n;i++){

        // for each child like 0 - 1,3
        int rankU = adj[i].size();

        for(int j=i+1;j<n;j++){

            int rank =  rankU + adj[j].size();

// if there is an edge between i and j, then we calculated twice or else no
            if (find(adj[i].begin(), adj[i].end(), j) != adj[i].end()) {
                    rank--;
                }


            maxRank = max(maxRank,rank);

        }
      }

     return maxRank;
    }
};







 
// eg 2:

// n = 5, 
// roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]


// take each pair :

// 2-1 : (2-1), (2-4), (2-3),(1-3) ,(1,0)

// 2-4 - (2-4),(2-1),(2-3)

// 2-3 - (2-3) , (2-4), (2-1) , (3-1), (3-0)

// 3-0 - (3-0) , (3-1) , (3-2) , (0-1)

// .......


//  so if i consider 1-2

//  So (nodes connected to 1) + (nodes connected to 2) - roads(1-2)- > (we need to subtract this because its added twice)


// so rank of 1 -> 3
// so rank of 2 -> 3

// total = 3+3-1 = 5





//  n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]

//  0 - 1 
//  1 - 2
//  2 - 3 , 4

//  5 - 6
//  5 - 7

//  Consider the pair (2, 5):
// Node 2 has 3 neighbors (degree = 3).

// Node 5 has 2 neighbors (degree = 2).

// These nodes are not directly connected, so we just sum the degrees.

// Total network rank = 3 (degree of 2) + 2 (degree of 5) = 5.

// so we dont have to consider only the node and children, we have t consider 
// a node with all other nodes
