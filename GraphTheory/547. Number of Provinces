class Solution {
public:
    
    void dfs(int city,vector<vector<int>> &cities, vector<bool> &vis){
      
       vis[city] = true;
       for(auto citi: cities[city]){

        if(!vis[citi])
           dfs(citi, cities, vis);
       }

    }


    int findCircleNum(vector<vector<int>>& isConnected) {
      
       int city = isConnected.size();
       vector<vector<int>> cities(city+1);
       
       int c=0;

    //    build adj matrix
       for(int i=1;i<=city;i++){
        for(int j=1;j<=city;j++){

            if(isConnected[i-1][j-1] ==1){

            cities[i].push_back(j);
            cities[j].push_back(i);
            }

        }
       }

       vector<bool> vis(city,false);

       for(int citi=1;citi<=city;citi++){
           if(!vis[citi]){
            c++;
            dfs(citi,cities,vis);
           }
       }



       return c;
         
    }
};


// [1 1 0]
// [1 1 0]
// [0 0 1]


//     0 1 2 3
//0   [1,0,0,1],
//1   [0,1,1,0],
//2   [0,1,1,1],
//3   [1,0,1,1]

// 0 - 3
// 1 -2
// 2-1 , 2-3
// 3-0

// so basically 0 - 3 , 1-2 , 2-3

//  0-1-2-3 are connected


// this is not same as islands prblms.

// so, we can form an adjanceny matrix
