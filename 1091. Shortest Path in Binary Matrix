class Solution {
public:

    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        
        int rows=grid.size();
        int col = grid[0].size();

        if (grid[0][0] == 1 || grid[rows-1][col-1] == 1) 
            return -1;

        vector<vector<int>> dis(rows,vector<int>(col,-1));

        vector<pair<int,int>> dir = {{1,0},{-1,0},{0,1},{0,-1},
                                  {-1,-1},{-1,1},{1,1},{1,-1}};

        queue<pair<int,int>> q;
        q.push({0,0});
        dis[0][0]=1;

        while(!q.empty()){

            pair<int,int> curr= q.front();
            q.pop(); 

            for(int i=0;i<8;i++){

                int nx = curr.first +  dir[i].first;
                int ny = curr.second + dir[i].second;

                if(nx<0 || ny<0 || nx>=rows || ny>=col || grid[nx][ny]== 1 || dis[nx][ny]!=-1 )
                 continue;

                q.push({nx,ny});
                grid[nx][ny]=1;
                dis[nx][ny] = dis[curr.first][curr.second]+1;

            }
        }
        return dis[rows-1][col-1]== -1 ? -1 : dis[rows-1][col-1];
}

};
