class Graph {
public:

    vector<vector< pair<int,int> >> adj;
    int N = 101;

    Graph(int n, vector<vector<int>>& edges) {

        adj.resize(n);
        for(int i=0;i<edges.size();i++){
              adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        
    }
    
    void addEdge(vector<int> edge) {

        adj[edge[0]].push_back({edge[1],edge[2]});
        
    }
    
    int shortestPath(int node1, int node2) {
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        q.push({0,node1});

        vector<int> dis(adj.size(), -1);
        dis[node1] =0;

        while(!q.empty()){

           int dist =q.top().first;
           int node =q.top().second;
           q.pop();

           for(auto child:adj[node]){

               int nnode = child.first;
               int ndist = child.second;

               if(dis[nnode]==-1 || dis[nnode] > dist+ndist){
                
                dis[nnode] = dist+ndist;
                q.push({dis[nnode],nnode});
               }

           }

        }

        return dis[node2];

    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */
