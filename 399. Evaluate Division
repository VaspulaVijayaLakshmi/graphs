class Solution {
public:

   double dfs(unordered_map<string,vector<pair<string,double>>> &adj,unordered_map<string, bool>  &vis,string s,string e){

          if(s==e) return 1.0;

          vis[s] = true;
          for(auto child : adj[s]){

            string alp = child.first;
            double val = child.second;

            if(!vis[alp]){
              double res =  dfs(adj,vis,alp,e);

it could be poosible tht s and e are both present but r not connected to each othr...once we traverse all children and we didnt encounter 
e, then return -1, if we did excounter e, then resturen the resuklt here itself

              if(res!=-1)
                 return res*val;
            }
            
          }

          return -1.0;
           
      }

   


    vector<double> calcEquation(vector<vector<string>>& eq, vector<double>& values, vector<vector<string>>& queries) {
               
       unordered_map<string, vector<pair<string,double>> > adj;

        for(int i=0;i<eq.size();i++){

            string x = eq[i][0];
            string y = eq[i][1];

            double op = values[i];

            adj[x].push_back({y,op});
            adj[y].push_back({x,1/op});
        }

// queries
        vector<double> res; 
        for(int i=0;i<queries.size();i++){

            unordered_map<string,bool> vis;
             
             string x =queries[i][0];
             string y =queries[i][1];

            if(adj.find(x) == adj.end() || adj.find(y) == adj.end())
               res.push_back(-1);

            else
             res.push_back(dfs(adj,vis,x,y));
         
        }

        return res;

    }
};


// I need data in the format of "a" -> {"b",1.3} , {"c", 2}.....

// pair<string, pair< string,double>>

// if i take adj vector, the prblm is 

// "a"->"e" , Instead of searching but "e" is not present only

// so better to take unordered map




// few things to keep in mind

// Eg 1: 
// a/b = 2.0

// now in adj list we can store as a -> (b,2)

//  2
// a->b

// but insetad of this can we simplify this

// a->b =2 (since it indicates a->b == a/b)
// b->a = 1/2 (b/a == 1/(a/b))



// Adj list is ready

// a->b =2
// b->c =3

// a->c = 6

// that means (a/b)*(b/c) = 2*3 =6


// // now traversing through the adj list for each query

// (a-> c)

// should i do dfs and find???

// (a->e )

// 'e' doesnt exist only, but i have to dfs for each and every 
// element n will not find

// so i can maintain some hashmap to find elements in O(1) time

// Eg: 

// 'a' as key and what all elements 'a' is connected to something like that

// in the Eg 1:

//  2  3
// a->b->c
//    |4
//    d


// a -> (b)
// b -> (c,d,e,f)


// but if we store that as list (c,d,e,f) how we will know a->e
// we have to dfs each time again

// something like this...

// so we can store map<map>

// a-> ( b-> )

// b->  ( c->
//        d->
//        e->
//        f->   
//     )

//     now lets say a->e

//     I can check 
//     map[a] contains e , no
//     so i go trhough each child of a ->  b and check map[map[child[a]]]= map[b] contains e??



//     and so on......


