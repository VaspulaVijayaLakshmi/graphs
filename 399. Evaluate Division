class Solution {
public:

   double dfs(unordered_map<string,vector<pair<string,double>>> &adj,unordered_map<string, bool>  &vis,string s,string e){

      vis[s]=true;

      if(s==e)
      return 1.0;

      for(auto child : adj[s]){
        
        if(!vis[child.first]){
                
           double res= dfs(adj,vis,child.first,e);

            if(res!=-1.0)
              return  res*child.second;
        
      }
      }

       return -1.0;  

      }

   


    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        unordered_map<string, vector<pair<string,double>>> adj;
        int n = equations.size();
     
        for(int i=0;i<n;i++){
            
            string a = equations[i][0];
            string b = equations[i][1];

            double op = values[i];

            adj[a].push_back({b,op});
            adj[b].push_back({a,1/op}); 

        }

        
         vector<double> result;


        for(int i=0;i<queries.size();i++){

             unordered_map<string,bool> vis;

            string strt = queries[i][0]; 
            string end  = queries[i][1];

            if (adj.find(strt) == adj.end() || adj.find(end) == adj.end())  
              result.push_back(-1.0); 

            else{
            double res= dfs(adj,vis,strt,end);
             result.push_back(res) ;
            }

        }

         return result;        
        
    }
};


// few things to keep in mind

// Eg 1: 
// a/b = 2.0

// now in adj list we can store as a -> (b,2)

//  2
// a->b

// but insetad of this can we simplify this

// a->b =2 (since it indicates a->b == a/b)
// b->a = 1/2 (b/a == 1/(a/b))



// Adj list is ready

// a->b =2
// b->c =3

// a->c = 6

// that means (a/b)*(b/c) = 2*3 =6


// // now traversing through the adj list for each query

// (a-> c)

// should i do dfs and find???

// (a->e )

// 'e' doesnt exist only, but i have to dfs for each and every 
// element n will not find

// so i can maintain some hashmap to find elements in O(1) time

// Eg: 

// 'a' as key and what all elements 'a' is connected to something like that

// in the Eg 1:

//  2  3
// a->b->c
//    |4
//    d


// a -> (b)
// b -> (c,d,e,f)


// but if we store that as list (c,d,e,f) how we will know a->e
// we have to dfs each time again

// something like this...

// so we can store map<map>

// a-> ( b-> )

// b->  ( c->
//        d->
//        e->
//        f->   
//     )

//     now lets say a->e

//     I can check 
//     map[a] contains e , no
//     so i go trhough each child of a ->  b and check map[map[child[a]]]= map[b] contains e??



//     and so on......
