Problem link: https://www.spoj.com/problems/TOPOSORT/
problem explanation:
https://www.youtube.com/watch?v=bS62tit40m8&list=PL2q4fbVm1Ik6DCzm9XZJbNwyHtHGclcEh&index=31


Problem:

Sandro is a well organised person. 
Every day he makes a list of things which need to be done and e numerates them from 1 to n. 
However, some things need to be done before others. 
In this task you have to find out whether Sandro can solve all his duties and if so, print the correct order.


Print "Sandro fails." if Sandro cannot complete all his duties on the list. 
If there is a solution print the correct ordering, the jobs to be done separated by a whitespace. 
If there are multiple solutions print the one, 
whose first number is smallest, if there are still multiple solutions, print the one whose second number is smallest, and so on.

Input:
8 9
1 4
1 2
4 2
4 3
3 2
5 2
3 5
8 2
8 6
Output:
1 4 3 5 7 8 2 6 



Input:
2 2
1 2
2 1
Output:
Sandro fails.

above :graph
1 -> 2
  <-
  //it conatins cycle so she couldn't complete it.
  
  
  
  //we need to apply toposort.
  //but what variations are necessary
  //we can solve this using kahn's algo with slight variation
  //so in the first step we will push all the nodes who's indegree is zero into the queue
  
  //but here we need to store the tasks in ascending order
  //so instead of sorting queue each time we can use minheap  
  
  
  //and this ques is basically asking if she will be able to complete all her tasks//
  //if there is no cycle she will definetely complete all tasks
  // so this problem is topo+cycle detection (kahn's algo)
  
  
