//Recursive


class Solution{
public:
    // Function to return a list containing the DFS traversal of the graph.
    
    
    void dfs(vector<int> adj[],int node,  vector<bool> &vis,vector<int>  &ans){
        
        vis[node]=true;
        ans.push_back(node);
        
        for(int child:adj[node]){
            if(!vis[child])
            dfs(adj,child,vis,ans);
        }
        
    }
    
    
    
    vector<int> dfsOfGraph(int N, vector<int> adj[]) {
        // Code 
        
        vector<int> ans;
         vector<bool> vis(N,false);
        
        for(int i=0;i<N;i++){
            if(!vis[i])
               dfs(adj,i,vis,ans);
        }
        
        return ans;
    }
};



______________________________________________________________________________
______________________________________________________________________________





//Iterative





//dry run on any example you will understand better
vector<int> dfsOfGraph(int N, vector<int> adj[]) {
        // Code 
        
        vector<int> ans;
         vector<bool> vis(N,false);
        
        stack<int> stk;
        stk.push(0);
        
        while(!stk.empty()){
            
            int node=stk.top();
            stk.pop();
            
            if(vis[node])continue;
            ans.push_back(node);
            
            vis[node]=true;
            
            for(int j=adj[node].size()-1;j>=0;j--){
                
                int child=adj[node][j];
                if(!vis[child])
                stk.push(child);
            }
        }
        
        return ans;
    }
