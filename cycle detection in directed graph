https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1?page=1&category=Graph&sortBy=submissions
    
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool dfs(vector<vector<int>> &adj, vector<bool> &vis, vector<bool> &pathVis, int node) {
        vis[node] = true;  // mark node as visited
        pathVis[node] = true;  // mark node as part of the current DFS path
        
        // Explore all adjacent nodes (children)
        for(int child : adj[node]) {
            if (!vis[child]) {  // if child hasn't been visited yet
                if (dfs(adj, vis, pathVis, child)) {
                    return true;  // cycle detected
                }
            } 
            else if (pathVis[child]) {  // if the child is part of the current DFS path, cycle detected
                return true;
            }
        }

        pathVis[node] = false;  // backtrack: unmark the current node from the recursion stack
        return false;  // no cycle found
    }
    
    bool isCyclic(vector<vector<int>> &adj) {
        int n = adj.size();  // number of nodes
        vector<bool> vis(n, false);  // visited nodes (for marking visited during any DFS traversal)
        vector<bool> pathVis(n, false);  // recursion stack for cycle detection
        
        // Perform DFS from all unvisited nodes
        for(int i = 0; i < n; i++) {
            if (!vis[i]) {
                if (dfs(adj, vis, pathVis, i)) {
                    return true;  // cycle detected
                }
            }
        }
        
        return false;  // no cycle found
    }
};
