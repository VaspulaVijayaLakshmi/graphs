// class Solution {
// public:
//     vector<vector<int>> adj;

//     void dfs(int node,vector<bool>& vis,vector<int>& res){

//         for(int child:adj[node]){
            
//             if(!vis[child]){
//                 res.push_back(child);
//                 vis[child]=true;
//                 dfs(child,vis,res);
//             }
//         }

//     }

//     vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {

//         //we can do multi DFS
//         adj.resize(n);

//         for(auto edge:edges){
//             adj[edge[1]].push_back(edge[0]);
//         }

//         vector<vector<int>> res(n);

//         for(int i=0;i<n;i++){
            
//             vector<bool> vis(n,0);
//             dfs(i,vis,res[i]);
//             sort(res[i].begin(),res[i].end());
//         }

//         return res;
//     }
// };



//topo sort

class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        vector<int> indegree(n, 0);

        // build graph
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            indegree[e[1]]++;
        }

        // queue for topo sort
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) q.push(i);
        }

        vector<set<int>> ancestors(n); // use set to avoid duplicates

        // process in topo order
        while (!q.empty()) {
            int u = q.front(); q.pop();

            for (int v : adj[u]) {
                // add u and all of uâ€™s ancestors to v
                ancestors[v].insert(u);
                ancestors[v].insert(ancestors[u].begin(), ancestors[u].end());

                indegree[v]--;
                if (indegree[v] == 0)
                    q.push(v);
            }
        }

        // convert sets to sorted vectors
        vector<vector<int>> result(n);
        for (int i = 0; i < n; i++)
            result[i] = vector<int>(ancestors[i].begin(), ancestors[i].end());

        return result;
    }
};
