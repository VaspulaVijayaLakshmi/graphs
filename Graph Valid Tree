Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input:
n = 5
edges = [[0, 1], [0, 2], [0, 3], [1, 4]]

Output:
true
Example 2:

Input:
n = 5
edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]

Output:
false






// class Solution {
// public:
//     bool dfs(vector<vector<int>> &adj, vector<bool> &vis, int node, int parent) {
//         vis[node] = true;

//         for (int child : adj[node]) {
//             if (!vis[child]) {
//                 if (!dfs(adj, vis, child, node)) return false;
//             } 
//             // If the child is visited and is not the direct parent, a cycle exists
//             else if (child != parent) {
//                 return false;
//             }
//         }
//         return true;
//     }

//     bool validTree(int n, vector<vector<int>>& edges) {
//         if (edges.size() != n - 1) return false; // A valid tree must have exactly n-1 edges

//         vector<vector<int>> adj(n);
//         for (const auto& edge : edges) {  // Fix loop range
//             int from = edge[0], to = edge[1];
//             adj[from].push_back(to);
//             adj[to].push_back(from);
//         }

//         vector<bool> vis(n, false);
//         int components = 0;

//         for (int i = 0; i < n; i++) {
//             if (!vis[i]) {
//                 components++;
//                 if (components > 1) return false; // More than one connected component
//                 if (!dfs(adj, vis, i, -1)) return false;
//             }
//         }

//         return true;
//     }
// };
