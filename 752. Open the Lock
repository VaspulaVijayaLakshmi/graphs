class Solution {
public:
    int openLock(vector<string>& deadends, string target) {

        queue<string> q;
        q.push("0000");
        unordered_set<string> deadend(deadends.begin(), deadends.end());
        unordered_map<string,bool> vis;

       int k=0;
       vis["0000"]=true;
       if (deadend.find("0000") != deadend.end()) {
            return -1;
        }

        while(!q.empty()){

            int sz=q.size();
             while(sz--){

            auto front= q.front();
            q.pop();

                if(front == target)
                             return k;

                for(int i=0;i<4;i++){

                        
                        string next =  front;
                        string prev = front;

                        // next means lets say 1 is there , next = 2 prev =0
                        // but for 9 and 0 
                        //  0 lets say next is 1 but prev is 9


                         next[i] == '9' ? next[i] = '0' : next[i]++;
                          prev[i] == '0' ? prev[i] = '9' : prev[i]--;

                        if( vis.find(next) == vis.end() && deadend.find(next) == deadend.end()) {
                          q.push(next);
                          vis[next]=true;
                        }


                        if(vis.find(prev) == vis.end() && deadend.find(prev) == deadend.end()) {
                          q.push(prev);
                          vis[prev]=true;
                        }
                    }
                }
            
                k++;

             }

        return -1;
        
    }
};
