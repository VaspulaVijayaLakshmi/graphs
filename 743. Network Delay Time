class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {

        vector<vector<pair<int,int>>> adj(n+1);

        for(int i=0;i<times.size();i++){

            int u = times[i][0];
            int v=  times[i][1];
            int w = times[i][2];

            adj[u].push_back({v,w});
        }


        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
               vector<int> dis(n+1,-1);


    //    priotity queue - time,node
        q.push({0,k});
        dis[k] =0;

        while(!q.empty()){

            int node = q.top().second;
            int t = q.top().first;
            q.pop();

            
            for(auto child : adj[node]){

                int nnode = child.first;
                int nt = child.second;

                if(dis[nnode] ==-1 || dis[nnode] > t+nt ){

                    q.push({t+nt,nnode});
                    dis[nnode] = t + nt;
                }

            }

        }

       int min_time=0;
       for(int i=1;i<=n;i++){

// if any node in unreachable
         if(dis[i]==-1){
           return -1;
         }   


// why max time, that would be the time to reach the end node, since dis array 
// represent the min time taken to reach node
         min_time = max(min_time,dis[i]);  

       }  

        
        return min_time;
    }
};
