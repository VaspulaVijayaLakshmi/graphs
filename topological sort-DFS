
Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u v, 
vertex u comes before v in the ordering. 
Topological Sorting for a graph is not possible if the graph is not directed and does not contain cycle.


There can be more than one topological sorting for a graph. 

The first vertex in topological sorting is always a vertex with in-degree as 0 (a vertex with no incoming edges).



void Graph::topologicalSort()
{
    stack<int> Stack;
 
    // Mark all the vertices as not visited
    bool* visited = new bool[V];
    
    
    for (int i = 0; i < V; i++)
        visited[i] = false;
 
 
    // Call the recursive helper function
    // to store Topological
    // Sort starting from all vertices one by one
    
    for (int i = 0; i < V; i++)
        if (visited[i] == false)
            topologicalSortUtil(i, visited, Stack);
 
 
    // Print contents of stack
    while (!Stack.empty()) {
        cout << Stack.top() << " ";
        Stack.pop();
    }
}




void topologicalSortUtil(i, visited, Stack);{

vis[node]=true;

for(int child:adj[src]){

if(!vis[child]){
dfs(child);
}



}



}
