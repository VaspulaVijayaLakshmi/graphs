
https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?page=1&category=Graph&sortBy=submissions

class Solution {
  public:
    vector<int> shortestPath(int V, int E, vector<vector<int>>& edges) {
        // code here
        
        vector<vector<pair<int,int>>> adj;
        adj.resize(V);
        
        for(auto it : edges){
            
            int u=it[0];
            int v=it[1];
            int wt=it[2];
            
            adj[u].push_back({v,wt});
            
        }
        
        
         // priotiy queue to store {dis,node}
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0,0});
        vector<bool> vis(adj.size(),false);
        
        
        vector<int> dis(adj.size(),INT_MAX);
        dis[0]=0;
        
        while(!pq.empty()){
            
            auto front=pq.top();
            
            int node=front.second;
            int distance=front.first;
            
            
            vis[node]=true;
            
            pq.pop();
            
            
            for(auto child : adj[node]){
                
                int cnode=child.first;
                int cdis=child.second;
                
                if(!vis[cnode] && distance + cdis < dis[cnode]){
                    
                    dis[cnode] = distance + cdis; 
                    pq.push({dis[cnode],cnode});
                }
                
            }
            

    }
    
    for(int i=0;i<V;i++)
    if(dis[i]==INT_MAX) dis[i]=-1;
    
              return dis;
        
        
    }
};
