#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int findShortestCycle(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        int ans = INT_MAX;

        // BFS from each node
        for (int start = 0; start < n; start++) {
            vector<int> dist(n, -1), parent(n, -1);
            queue<int> q;
            q.push(start);
            dist[start] = 0;

            while (!q.empty()) {
                int u = q.front();
                q.pop();

                for (int v : adj[u]) {
                    if (dist[v] == -1) { 
                        dist[v] = dist[u] + 1;
                        parent[v] = u;
                        q.push(v);
                    }
                    // Found a cycle (but not the immediate parent)
                    else if (parent[u] != v) {
                        ans = min(ans, dist[u] + dist[v] + 1);
                    }
                }
            }
        }

        return ans == INT_MAX ? -1 : ans;
    }
};




// You can use DFS to find cycles,
// but for shortest cycles in an unweighted graph, BFS is much simpler and safer.

// Here’s why:

// DFS naturally finds any cycle, but not necessarily the shortest one.

// To get the shortest cycle with DFS, you’d have to do some messy bookkeeping of discovery times and back edges, which can get tricky in undirected graphs.

// BFS guarantees shortest distance in an unweighted graph, so the first time you find a cycle from a starting node, it’s automatically the shortest from that start.
