class Solution {
public:
    int minMutation(string startGene, string endGene, vector<string>& bank) {
        
        queue<string> q;
        q.push(startGene);

        unordered_set<string> bankSet(bank.begin(), bank.end());
        unordered_map<string,bool> vis;

        vis[startGene] = true;

        vector<char> gene={'A','C','G','T'};


        if(startGene==endGene) return 0;


        int k=0;
     
        while(!q.empty()){

            int sz = q.size();
            while(sz--){

            auto front= q.front();
            q.pop();


            if(front==endGene)
            return k;

            for(int i=0;i<4;i++){
            for(int j=0;j<front.size();j++){
                string next = front;

                next[j] = gene[i];
     
               if(vis.find(next)!=vis.end() || bankSet.find(next) == bankSet.end())
                 continue;

                q.push(next);
                vis[next]=true;

            }

            }

            }
            k++;

        }

        return -1;

    }
};
