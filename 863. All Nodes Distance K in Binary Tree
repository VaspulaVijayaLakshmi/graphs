//https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/
//similar question

class Solution {
    
    private:
    //adjacency list
    unordered_map<int,vector<int>> adj; 
    
    void createGraph(TreeNode* root){

       if(!root) return ;

        if(root->left){
        adj[root->val].push_back(root->left->val);
        adj[root->left->val].push_back(root->val);
        createGraph(root->left);
        }

        if(root->right){
        adj[root->val].push_back(root->right->val);
        adj[root->right->val].push_back(root->val);
        createGraph(root->right);
        }

        
    }
    
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        createGraph(root);


// for (const auto& v : adj) {
//         cout << "Node " << v.first << ": ";
//         for (int neighbor : v.second) {
//             cout << neighbor << " ";
//         }
//         cout << endl;
//     }


        queue<int> q;
        q.push(target->val);
       unordered_map<int, bool> vis;
        int l=0;
        vector<int> v;

        while(!q.empty()){

        int level=q.size();

        if(l==k){
          while(!q.empty()){
            v.push_back(q.front());
            q.pop();
          }
          return v;
        }
        
        while(level--){

         int ele = q.front();
         q.pop();
         vis[ele] = true;

        for(int child: adj[ele]){

          if(!vis[child])
             q.push(child);
        }
        }

        l++;

        }
        
       return {}; 
    }
};
