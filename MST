class Solution {
  public:
  
  vector<int> par;
  vector<int> rank;
  
  
  int find(int x){
      
      if(x==par[x]) return x;
      
      return find(par[x]);
      
  }
  
  
  void unionRank(int a,int b){
      
    
    if(rank[a]>=rank[b]){
        par[b] = a;
        rank[a]+= rank[b];
    }
    
    else{
        
        par[a]=b;
        rank[b]+=rank[a];
    }
    
    
  }
  
  
    // Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) {
        
    //  sort the edges, based on dis, asceding order
    // perform union  operation
    
    // do we need to write  custom sort
    
    
    par.resize(V);
    rank.resize(V,0);
    
    for(int i=0;i<V;i++){
        par[i]=i;
    }
    
    
    
    vector<pair<int,pair<int,int>>> edges;
    int mst=0;
    
    for(int i=0;i<V;i++){
        
        for(auto it : adj[i]){
            
            int u=i;
            int v=it[0];
            int wt=it[1];
            
            edges.push_back({wt,{u,v}});
            
        }
        
    }
    
    
    
    sort(edges.begin(),edges.end());
    int sum=0;
    
    for(auto it: edges){
        
        int wt=it.first;
        int u= it.second.first;
        int v= it.second.second;
        
        int a=find(u);
        int b=find(v);
        
        
        if(a!=b){
           
           mst+=wt;
           unionRank(a,b);
           
        }
        

    }
    
    return mst;
    
    }
};


