class Solution {
  public:
    int wordLadderLength(string startWord, string endWord,
                         vector<string>& wordList) {
         
         
        if(startWord==endWord) return 0;
        
      
        unordered_set<string> words;
        
        for(int i=0;i<wordList.size();i++){
            words.insert(wordList[i]);
            
        }
        
        if(words.find(endWord)==words.end())
          return 0;
          
                
        unordered_map<string,bool> vis; 
                             
        queue<string> q;
        q.push(startWord);
        vis[startWord] = true;
        int steps=1;
        
        
        while(!q.empty()){
            
            int size=q.size();
            
            while(size--){
            
            auto front=q.front();
            q.pop();
            
            
            for(int i=0;i<front.length();i++){
                
                 string prefix=front.substr(0,i);
                 string suffix=front.substr(i+1);
                   
              for(int j=97;j<123;j++){
 
                  string newWord = (prefix + char(j) + suffix);
                   
                //   cout<<newWord<<" , ";
                   
                  if(newWord==endWord){
                      return steps+1;
                  }
                   
                   
                   
                  if(words.find(newWord)!=words.end() && !vis[newWord]){
                     q.push(newWord);
                     vis[newWord]=true;
                  }
                   
                }
            }
            
            }
            
            steps++;
            
        }
        
        return 0;
        
    }
};

