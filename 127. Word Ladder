class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        queue<string> q;
        q.push(beginWord);

        unordered_map<string,bool> vis;
        vis[beginWord] = true;

        if(beginWord.length() != endWord.length())
          return 0;

        unordered_set<string> words(wordList.begin(),wordList.end());
        int k=1;

        while(!q.empty()){

            int sz=q.size();
            while(sz--){

            auto front = q.front();
            q.pop();

            if(front == endWord)
              return k;

            // for each alphabet
            for(int i=0;i<26;i++){

            // go through each letter
            for(int j=0;j<front.size();j++){

                string next= front;
                next[j] = 'a' + i;

                if(vis.find(next) == vis.end() && words.find(next) != words.end()){
                 q.push(next);
                 vis[next] = true;
                }

              }

            }
            }

            k++;
        }

     return 0;

    }
};
