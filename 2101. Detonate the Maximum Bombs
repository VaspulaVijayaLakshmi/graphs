#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> adj;

    int dfs(int u, vector<int>& vis) {
        vis[u] = 1;
        int count = 1;
        for (int v : adj[u])
            if (!vis[v])
                count += dfs(v, vis);
        return count;
    }

    int maximumDetonation(vector<vector<int>>& bombs) {
        int n = bombs.size();
        adj.assign(n, {});

        // Build adjacency list
        for (int i = 0; i < n; i++) {
            long long x1 = bombs[i][0], y1 = bombs[i][1], r = bombs[i][2];
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                long long dx = x1 - bombs[j][0];
                long long dy = y1 - bombs[j][1];
                if (dx * dx + dy * dy <= r * r)
                    adj[i].push_back(j);
            }
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            vector<int> vis(n, 0);

           // dfs on each bomb to see which bomb detomation will result in max
            ans = max(ans, dfs(i, vis));
        }
        return ans;
    }
};
