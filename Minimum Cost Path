class Solution
{
    public:
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        // Code here
        
        // Dikjistra
        
        vector<int> movesX = {1,-1,0,0};
	    vector<int> movesY = {0,0,1,-1};
        
   priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> pq;
        
        int n=grid.size();
        
        vector<vector<int>> dis(n,vector<int>(n,1e9));
        

        pq.push({grid[0][0],{0,0}});
        dis[0][0]=grid[0][0];
        
        
        while(!pq.empty()){
            
            auto front=pq.top();
            pq.pop();
            
            
            int x=front.second.first;
            int y=front.second.second;
            int d=front.first;
            
            if(x==n-1 && y==n-1) return d;
            
            
            for(int i=0;i<4;i++){
                
               int nx=x+movesX[i];
                int ny=y+movesY[i];
                
                
	            if( nx >= 0 && ny>=0 && nx<n && ny<n && dis[nx][ny] > d + grid[nx][ny]){
	             
	                    dis[nx][ny] = d + grid[nx][ny];
	                    pq.push({dis[nx][ny],{nx,ny}});
	            }

            }
            
        }
        
        
        return 0;
        
        
        
    }
};
