class Solution {
  public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex src.
    vector<int> dijkstra(vector<vector<pair<int, int>>> &adj, int src) {
  
        // priotiy queue to store {dis,node}
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0,src});
        vector<bool> vis(adj.size(),false);
        
        
        vector<int> dis(adj.size(),INT_MAX);
        dis[src]=0;
        
        while(!pq.empty()){
            
            auto front=pq.top();
            
            int node=front.second;
            int distance=front.first;
            
            
            vis[node]=true;
            
            pq.pop();
            
            
            for(auto child : adj[node]){
                
                int cnode=child.first;
                int cdis=child.second;
                
                if(!vis[cnode] && distance + cdis < dis[cnode]){
                    
                    dis[cnode] = distance + cdis; 
                    pq.push({dis[cnode],cnode});
                }
                
            }
            

    }
    
              return dis;
}
    
};
