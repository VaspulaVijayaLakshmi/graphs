class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    
	    vector<int> movesX = {1,1,-1,-1,2,2,-2,-2};
	    vector<int> movesY = {2,-2,2,-2,1,-1,1,-1};
	    
	    
	    if(KnightPos[0] == TargetPos[0] && KnightPos[1] == TargetPos[1])
	     return 0;
	    
	    queue<pair<pair<int,int>,int>> q;
	    q.push({{KnightPos[0] , KnightPos[1]},0});
	    
	    vector<vector<bool>> vis(N, vector<bool>(N, false));
	    vis[KnightPos[0]][KnightPos[1]] = true;
	    
	
	    while(!q.empty()){
	        
	        int sz=q.size();
	        
	        while(sz--){
	        
	        auto front= q.front();
	        q.pop();
	        
	        if(front.first.first== TargetPos[0] && front.first.second == TargetPos[1])
	         return front.second;
	        
	        for(int i=0;i<8;i++){
	            
	            //isValid
	            int nx=  front.first.first + movesX[i];
	            int ny=  front.first.second + movesY[i];
	            
	            if( nx<0 || ny<0 || nx>=N || ny>=N || vis[nx][ny]==true)
	              continue;
	              
	              else{
	                  vis[nx][ny]=true;
	                   q.push({{nx,ny},front.second+1});
	              }
	              
	        }
	        
	        }
	       
	       
	        
	    }
	    
	   return -1;
	    
	    
	}
};






// In this case simple multisource bfs doesnt work
// where after iteration we will be doing stpes++
// like rotten oranges prblm.

// Because we need at tht cell from prev distance, not leevl wise...


// so we need to maintain a dis array - 2D array and update distances..
// or in queue u can track distance along with dimension




